
s1 = b'''
\x80\x04\x95W\x04\x00\x00\x00\x00\x00\x00}\x94(\x8C\x07version\x94K\x01\x8C\x02id\x94\x8C\x09cron_job1\x94\x8C\x04func\x94\x8C=funboost.timing_job.timing_job_base:push_fun_params_to_broker\x94\x8C\x07trigger\x94\x8C\x19apscheduler.triggers.cron\x94\x8C\x0BCronTrigger\x94\x93\x94)\x81\x94}\x94(h\x01K\x02\x8C\x08timezone\x94\x8C\x04pytz\x94\x8C\x02_p\x94\x93\x94(\x8C\x0DAsia/Shanghai\x94M\xE8qK\x00\x8C\x03LMT\x94t\x94R\x94\x8C\x0Astart_date\x94N\x8C\x08end_date\x94N\x8C\x06fields\x94]\x94(\x8C apscheduler.triggers.cron.fields\x94\x8C\x09BaseField\x94\x93\x94)\x81\x94}\x94(\x8C\x04name\x94\x8C\x04year\x94\x8C\x0Ais_default\x94\x88\x8C\x0Bexpressions\x94]\x94\x8C%apscheduler.triggers.cron.expressions\x94\x8C\x0DAllExpression\x94\x93\x94)\x81\x94}\x94\x8C\x04step\x94Nsbaubh\x18\x8C\x0AMonthField\x94\x93\x94)\x81\x94}\x94(h\x1D\x8C\x05month\x94h\x1F\x88h ]\x94h$)\x81\x94}\x94h'Nsbaubh\x18\x8C\x0FDayOfMonthField\x94\x93\x94)\x81\x94}\x94(h\x1D\x8C\x03day\x94h\x1F\x88h ]\x94h$)\x81\x94}\x94h'Nsbaubh\x18\x8C\x09WeekField\x94\x93\x94)\x81\x94}\x94(h\x1D\x8C\x04week\x94h\x1F\x88h ]\x94h$)\x81\x94}\x94h'Nsbaubh\x18\x8C\x0EDayOfWeekField\x94\x93\x94)\x81\x94}\x94(h\x1D\x8C\x0Bday_of_week\x94h\x1F\x89h ]\x94h$)\x81\x94}\x94h'Nsbaubh\x1A)\x81\x94}\x94(h\x1D\x8C\x04hour\x94h\x1F\x89h ]\x94h"\x8C\x0FRangeExpression\x94\x93\x94)\x81\x94}\x94(h'N\x8C\x05first\x94K\x17\x8C\x04last\x94K\x17ubaubh\x1A)\x81\x94}\x94(h\x1D\x8C\x06minute\x94h\x1F\x89h ]\x94hM)\x81\x94}\x94(h'NhPK1hQK1ubaubh\x1A)\x81\x94}\x94(h\x1D\x8C\x06second\x94h\x1F\x89h ]\x94hM)\x81\x94}\x94(h'NhPK2hQK2ubaube\x8C\x06jitter\x94Nub\x8C\x08executor\x94\x8C\x07default\x94\x8C\x04args\x94\x8C\x0Asum_queue3\x94\x85\x94\x8C\x06kwargs\x94}\x94(\x8C\x01x\x94K2\x8C\x01y\x94K<uh\x1D\x8C.push_fun_params_to_broker_for_queue_sum_queue3\x94\x8C\x12misfire_grace_time\x94K\x01\x8C\x08coalesce\x94\x88\x8C\x0Dmax_instances\x94K\x01\x8C\x0Dnext_run_time\x94\x8C\x08datetime\x94\x8C\x08datetime\x94\x93\x94C\x0A\x07\xE9\x06\x1A\x1712\x00\x00\x00\x94h\x0F(h\x10M\x80pK\x00\x8C\x03CST\x94t\x94R\x94\x86\x94R\x94u.
'''

import pickle

# 修复问题：移除二进制数据前后的换行符和额外字符
# 这是导致反序列化失败的主要原因
cleaned_data = s1.strip()

print(f"原始数据长度: {len(s1)}")
print(f"清理后数据长度: {len(cleaned_data)}")

try:
    job = pickle.loads(cleaned_data)
    print(job)
    print("✅ 反序列化成功!")
    print(f"Job ID: {job['id']}")
    print(f"Job 函数: {job['func']}")
    print(f"Job 触发器: {job['trigger']}")
    print(f"Job 参数: args={job['args']}, kwargs={job['kwargs']}")
    print(f"下次运行时间: {job['next_run_time']}")
    
    # 这是一个 APScheduler job 的字典表示
    print(f"\nJob 类型: {type(job)}")
    
except Exception as e:
    print(f"❌ 反序列化失败: {e}")
    print("请确保数据格式正确，并检查是否有额外的字符")

print("\n=== 问题总结 ===")
print("""
APScheduler Redis 序列化问题的原因:
1. 二进制数据包含了前后的换行符 \\n
2. pickle.loads() 要求数据格式严格，不能有额外字符
3. 解决方案：使用 data.strip() 清理数据

预防措施:
1. 在 Redis 存储时确保数据格式正确
2. 读取时进行数据验证和清理
3. 使用合适的序列化配置
""")